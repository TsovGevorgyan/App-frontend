import {
  createRequest,
  createSuccess,
  createFailure,
  listRequest,
  listSuccess,
  listFailure,
  findRequest,
  findSuccess,
  findFailure,
  updateRequest,
  updateSuccess,
  updateFailure,
  deleteRequest,
  deleteSuccess,
  deleteFailure,
} from './actions';

import { handleActions } from 'redux-actions';

const initialState = {
  userProducts: {},
  errorMessage: '',
  isCreateSuccess: false,
  isCreateFailure: false,
  isCreateRequest: false,
  isProductRequest: false,
  isProductListSuccess: false,
  isProductListFailure: false,
  isProductListRequest: false,
  isFindProductSuccess: false,
  isFindProductFailure: false,
  isFindProductRequest: false,
  isUpdateSuccess: false,
  isUpdateFailure: false,
  isUpdateRequest: false,
  isDeleteSuccess: false,
  isDeleteFailure: false,
  isDeleteRequest: false,
};

const reducer = handleActions(
  {
    [createRequest]: (state) => ({
      ...state,
      isCreateRequest: true,
      isCreateSuccess: false,
      isCreateFailure: false,
      userProducts: {},
    }),
    [createSuccess]: (state, { payload }) => ({
      ...state,
      userProducts: payload,
      isCreateRequest: false,
      isCreateSuccess: true,
      isCreateFailure: false,
    }),
    [createFailure()]: (state, { payload }) => ({
      ...state,
      userProducts: {},
      isCreateRequest: false,
      isCreateSuccess: false,
      isCreateFailure: true,
      errorMessage: payload,
    }),
    [listRequest]: (state) => ({
      ...state,
      isProductListSuccess: false,
      isProductListFailure: false,
      isProductListRequest: true,
      userAccount: {},
    }),
    [listSuccess]: (state, { payload }) => ({
      ...state,
      userProducts: payload,
      isProductListSuccess: true,
      isProductListFailure: false,
      isProductListRequest: false,
    }),
    [listFailure]: (state, { payload }) => ({
      ...state,
      isProductListFailure: true,
      isProductListRequest: false,
      isProductListSuccess: false,
      errorMessage: payload,
    }),
    [findRequest]: (state) => ({
      ...state,
      isFindProductRequest: true,
      isFindProductSuccess: false,
      isFindProductFailure: false,
      userProducts: {},
    }),
    [findSuccess]: (state, { payload }) => ({
      ...state,
      userProducts: payload,
      isFindProductRequest: false,
      isFindProductSuccess: true,
      isFindProductFailure: false,
    }),
    [findFailure]: (state, { payload }) => ({
      ...state,
      userProducts: {},
      isFindProductRequest: false,
      isFindProductSuccess: false,
      isFindProductFailure: true,
      errorMessage: payload,
    }),
    [updateRequest]: (state) => ({
      ...state,
      isUpdateRequest: true,
      isUpdateSuccess: false,
      isUpdateFailure: false,
      userProducts: {},
    }),
    [updateSuccess]: (state, { payload }) => ({
      ...state,
      isUpdateRequest: false,
      isUpdateSuccess: true,
      isUpdateFailure: false,
      userProducts: payload,
    }),
    [updateFailure]: (state, { payload }) => ({
      ...state,
      isUpdateRequest: false,
      isUpdateSuccess: false,
      isUpdateFailure: true,
      errorMessage: payload,
    }),
    [deleteRequest]: (state) => ({
      ...state,
      isDeleteRequest: true,
      isDeleteSuccess: false,
      isDeleteFailure: false,
      userProducts: {},
    }),
    [deleteSuccess()]: (state, { payload }) => ({
      ...state,
      isDeleteRequest: false,
      isDeleteSuccess: true,
      isDeleteFailure: false,
      userProducts: payload,
    }),
    [deleteFailure()]: (state, { payload }) => ({
      ...state,
      isDeleteRequest: false,
      isDeleteSuccess: false,
      isDeleteFailure: true,
      errorMessage: payload,
    }),
  },
  initialState
);

export default reducer;
